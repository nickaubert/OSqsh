#!/usr/bin/perl

##########################################################################
# Oracle client CLI wrapper for SQLPlus that adds Readline support.
#
# This isn't likely to be any kind of full replacement for SQLPlus,
# but readline support should make it more user friendly (if a modern
# CLI is your friend).
#
##########################################################################

use warnings;
use strict;
use Term::ReadLine;
use DBD::Oracle;

my $debug = 1;

## load contents of rc file if any
#
my %rc_vars = &load_rcfile;

## assign needed variables 
#  environment has precedence over rc file
#  load_neededvars subroutine loads directly into %ENV
#
my @need_oravars = qw( 
    ORACLE_HOME
    ORACLE_SID
    ORACLE_USER
    ORACLE_PASS
    TNS_ADMIN
);
my $oracle_settings_ref = &load_neededvars ( @need_oravars );
my %oracle_settings = %$oracle_settings_ref;
my $oracle_sid  = $oracle_settings{'ORACLE_SID' };
my $oracle_user = $oracle_settings{'ORACLE_USER'};
my $oracle_pass = $oracle_settings{'ORACLE_PASS'};

## connect to database
#
my $dbh = DBI->connect( "dbi:Oracle:$oracle_sid" , "$oracle_user" , "$oracle_pass" , 
    { RaiseError => 0 , AutoCommit => 1 } )
    || die( $DBI::errstr . "\n" );

# $dbh->{AutoCommit}    = 1;
# $dbh->{RaiseError}    = 0;
$dbh->{ora_check_sql} = 0;
$dbh->{RowCacheSize}  = 16;


## set up readline with tab completion
#
my $term = Term::ReadLine->new('OSqsh');

## load miscellaneous tab-completion words
#
my @nice_tabs = qw( 
    select insert into create from where exists between
    varchar2 number timestamp 
    dual 
    describe exit quit
);
my %nice_tabs = (
    basic_cmd => [ 'select' , 'insert' , 'into' , 'create' , 'from' , 'where' , 'exists' , 'between' ],
    data_type => [ 'varchar2' , 'number' , 'timestamp' ],
    sys_table => [ 'dual' ],
    sqlplscmd => [ 'describe' , 'exit' , 'quit' ],
    usr_table => [ ]
);

## optionally load tables for tab-completion
#
if ( ( defined $rc_vars{'ENABLE_TABS'} ) and ( $rc_vars{'ENABLE_TABS'} =~ /on|yes|true/i ) ) {
    my @user_tables = &load_usertables( $dbh );
    push @nice_tabs , @user_tables;
    push @{$nice_tabs{usr_table}} , @user_tables;
}
&load_completion( $term , \%nice_tabs );


## now run the prompt
#
my @multiline_cmd;
my $sth;
my $prompt = "OSQSH> ";
while ( defined ( my $command = $term->readline($prompt)) ) {

    ## quit (^D also works)
    #
    if ( $command =~ /^(quit|exit)\W*/i ) {
        exit 0;

    ## reproduce DESCRIBE sqlplus command
    #  add table column headers for tab completion
    #
    } elsif ( $command =~ /^des(c|cr|cri|crib|cribe)\s+(.*)$/i ) {

        my @user_tables = &load_usertables( $dbh );
        my @arguments = split /\s+/ , $2;
        foreach my $this_argument ( @arguments ) {
            last if ( $this_argument eq ';' );
            # print "foreach $this_argument\n";
            if ( grep /^$this_argument$/i , @user_tables ) {
                # print "has grep: $this_argument\n";
                my ( $display_desc , @desc_return ) = &desc_table( $dbh , $this_argument );
                push @{$nice_tabs{usr_table}} , @desc_return;
                &load_completion( $term , \%nice_tabs);
                print "$display_desc";
            } else {
                print "No such table $this_argument in USER_TABLES\n";
            }
        }

    ## any line that contains a semicolon will be executed (anything after the semicolon is ignored)
    #
    } elsif ( $command =~ /;/ ) {

        ## strip semicolon and anything after
        #
        $command =~ s/;.*$//;

        my $full_cmd;
        if ( @multiline_cmd > 0 ) {
            print "YES!\n";
            push @multiline_cmd , $command;
            $full_cmd = join ' '  , @multiline_cmd;
            $term->addhistory("$full_cmd;");
            @multiline_cmd = ();
        } else {
            $full_cmd = $command;
        }

        # print "Gonna SQL:\n$full_cmd\n";
        # my $presets       = join "\n" , @presets;
        # $full_cmd =~ s/;.*$//;

        my ( $result_ref , $result_columninfo_ref ) = &run_sql_command( $dbh , $full_cmd );
        if ( ( ref($result_ref) eq 'ARRAY' ) and ( ref($result_columninfo_ref) eq 'ARRAY' ) ) {
            my $result_out = &format_result( $result_ref , $result_columninfo_ref );
            print "$result_out";
        } else {
            if ( $debug ) { print "\$result_ref: $result_ref\n"; }
        }

    ## anything else is considered a multiline command
    #
    } else {
        push @multiline_cmd , $command;
    }

    ## show the buffer if anythings in it
    #
    if ( @multiline_cmd > 0 ) {
        my $display_multiline_cmd = join "\n       " , @multiline_cmd;
        print "       $display_multiline_cmd\n";
    }

}

print "\n";
END {
    $dbh->disconnect if defined($dbh);
}


##########################################################################
# Subroutines
##########################################################################
sub load_rcfile {

    my %local_rc_vars;
    my $setcount = 1;
    if ( defined $ENV{'HOME'} ) {
        my $rc_file = "$ENV{'HOME'}/.osqshrc";
    
        if ( -f $rc_file ) {
            open ( RCFILE , "$rc_file" ) || die "Unable to open $rc_file\n";
            while (<RCFILE>) {
                chomp;              # no newline
                s/#.*//;            # no comments
                s/^\s+//;           # no leading white
                s/\s+$//;           # no trailing white
                next unless length; # anything left?
                my ($var, $value);
                if ( m/^(set\s+.*)$/i ) {
                    # print "found setting $1\n";
                    $var   = "set" . $setcount;
                    $value = $1;
                    $setcount++;
                } else {
                    ( $var , $value ) = split( /\s*=\s*/ , $_ , 2 );
                }
                $local_rc_vars{$var} = $value;
            }
        }
    }

    return %local_rc_vars;

}

sub load_neededvars {

    my @load_these = @_;
    my %oracle_settings;
    foreach my $this_oravar ( @load_these ) {
        if ( defined $ENV{"$this_oravar"} ) {
            $oracle_settings{$this_oravar} = $ENV{"$this_oravar"};
        } elsif ( defined $rc_vars{$this_oravar} ) {
            $ENV{"$this_oravar"} = $rc_vars{$this_oravar};
            $oracle_settings{$this_oravar} = $rc_vars{$this_oravar};
        } else {
            print "Enter $this_oravar: ";
            my $input_var = <STDIN>;
            chomp $input_var;
            $ENV{"$this_oravar"} = $input_var;
            $oracle_settings{$this_oravar} = $input_var;
        }
    }

    return \%oracle_settings;
}

sub load_usertables {

    my ( $dbh_ref ) = @_;
    my $cmd = "SELECT TABLE_NAME FROM USER_TABLES";
    my @load_tables = map { $_ = $_->{TABLE_NAME}; } @{ $dbh->selectall_arrayref( $cmd, { Slice => {} }) };
    return @load_tables;

}

sub load_completion {

    my ( $term_ref , $nice_tabs_ref ) = @_;

    ## just load everything into a big list
    #
    my %local_tabs = %$nice_tabs_ref;
    my @these_words;
    foreach my $this_key ( keys %$nice_tabs_ref ) {
        push @these_words , @{$local_tabs{$this_key}};
        # print "adding @these_words\n";
    }

    my %lc_keys;
    map { $lc_keys{lc($_)} = '' } @these_words;
    my @tab_words = ( keys %lc_keys , map { uc($_) } keys %lc_keys );
    $term_ref->Attribs->{completion_function} = sub { return @tab_words; };
    return @tab_words;
}

sub get_col_headers {

    my ( $dbh_ref , $read_table ) = @_;
    my $cmd = uc("SELECT COLUMN_NAME FROM ALL_COL_COMMENTS WHERE TABLE_NAME = '$read_table'");
    my @load_columns = map { $_ = $_->{COLUMN_NAME}; } @{ $dbh->selectall_arrayref( $cmd, { Slice => {} })};
    return @load_columns;

}


sub get_column_data {

    ## collect column data
    #  there MUST be a better way to do this
    #
    my ( $dbh_ref , $sth_ref ) = @_;
    my @type_names   = map { scalar $dbh_ref->type_info($_)->{TYPE_NAME} } @{ $sth_ref->{TYPE} };
    my @column_names = @{ $sth_ref->{NAME}      };
    my @precision    = @{ $sth_ref->{PRECISION} };
    my @scale        = @{ $sth_ref->{SCALE}     };
    my @column_stuff;
    my $count_columns = 0;
    foreach my $this_col_name ( @column_names ) {
        $column_stuff[$count_columns]{'col_name'}  = $this_col_name;
        $column_stuff[$count_columns]{'col_type'}  = $type_names[$count_columns];
        $column_stuff[$count_columns]{'precision'} = $precision[$count_columns];
        $column_stuff[$count_columns]{'scale'}     = $scale[$count_columns];
        $column_stuff[$count_columns]{'scale2'}    = $scale[$count_columns];
        $column_stuff[$count_columns]{'maxwidth'}  = length($this_col_name); # will may be updated below

        # print "$this_col_name is type $type_names[$count_columns]\n";
        my @right_justify_types = ( 'DECIMAL' , 'DATE' , 'NUMBER' , 'DOUBLE PRECISION' );
        if ( grep m/$type_names[$count_columns]/ , @right_justify_types ) {
            $column_stuff[$count_columns]{'justify'} = 'right';
        } else {
            $column_stuff[$count_columns]{'justify'} = 'left';
        }
        $count_columns++;
    }

    return @column_stuff;

}

sub get_header {

    my @column_stuff = @_;
    my $header = '';
    my $count_columns = 0;
    my @separators;
    $header .= "\n";
    foreach my $this_column ( @column_stuff ) {

        my $width = $column_stuff[$count_columns]{'maxwidth'};
        for ( my $i = 1 ; $i <= $width ; $i++ ) { $separators[$count_columns] .= "-"; }
        $header .= sprintf( "%-"."$width"."s", ${$this_column}{'col_name'});
        $header .= ' ';
        $count_columns++;
    }
    $header .= "\n";

    foreach my $this_line ( @separators ) { $header .= "$this_line "; }
    $header .= "\n";

    return $header;
}

sub run_sql_command {

    my ( $dbh_ref , $sql_cmd ) = @_;

    # my $sth_ref = $dbh_ref->prepare($sql_cmd);
    my $sth_ref = $dbh_ref->prepare($sql_cmd) or print "\nSQL fail!\n\n";
    if ( $sth_ref ) {
        my $ary_ref = $dbh->selectall_arrayref($sql_cmd);
        my @ary_info = &get_column_data ( $dbh_ref , $sth_ref );
        my $ary_info_ref = \@ary_info;
        return ( $ary_ref , $ary_info_ref );
    } else {
        return ( \"This is not an array reference" , \"Neither is this" );
    }
    

}

sub format_result {

    my ( $out_ref , $out_info_ref ) = @_;
    my $display_result = '';

    my @column_info = @$out_info_ref;

    ## loop over table to determine the widest element in each column
    #
    foreach my $this_row ( @$out_ref ) {
        my $col_count = 0;
        foreach my $this_col ( @$this_row ) {

            ## using (NULL) to represent null values, so length is 6
            #
            my $colwidth = ( defined($this_col) ) ? length( $this_col ) : 6;

            if ( $colwidth > $column_info[$col_count]{'maxwidth'} ) {
                $column_info[$col_count]{'maxwidth'} = $colwidth;
            }
            $col_count++;
        }

    }

    my $header_string = &get_header( @column_info );
    $display_result .= "$header_string";

    my $rv = 0;
    foreach my $this_row ( @$out_ref ) {
        my $count_columns = 0;
        foreach my $this_column ( @$this_row ) {

            my $col_width = $column_info[$count_columns]{'maxwidth'};
            my $justify = "%-";
            if ( $column_info[$count_columns]{'justify'} eq 'right' ) {
                $justify = "%";
            }

            if ( ! defined $this_column ) { $this_column = '(NULL)'; }
            $display_result .= sprintf( "$justify"."$col_width"."s", $this_column);
            $display_result .=  " ";
            $count_columns++;
        }
        $rv++;
        $display_result .= "\n";
    }
    $display_result .= "\n$rv rows selected.\n\n";

    return $display_result;
}

sub desc_table {

    my ( $dbh_ref , $table_name ) = @_;

    my $desc_cmd = uc("
        SELECT  COLUMN_NAME, 
                NULLABLE, 
                DATA_TYPE, 
                CHAR_LENGTH, 
                DATA_PRECISION
        FROM    USER_TAB_COLUMNS
        WHERE   TABLE_NAME = '$table_name'
    ");

    my ( $result_ref , $result_columninfo_ref ) = &run_sql_command( $dbh_ref , $desc_cmd );
    my $result_out = &format_result( $result_ref , $result_columninfo_ref );

    my @column_headers = &get_col_headers( $dbh , $table_name );

    return ( $result_out , @column_headers );

}
