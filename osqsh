#!/usr/bin/perl

##########################################################################
# Oracle client CLI wrapper for SQLPlus that adds Readline support.
#
# This isn't likely to be any kind of full replacement for SQLPlus,
# but readline support should make it more user friendly (if a modern
# CLI is your friend).
#
##########################################################################

use warnings;
use strict;
use Term::ReadLine;
use DBD::Oracle;

## load contents of rc file if any
#
my %rc_vars = &load_rcfile;

## assign needed variables 
#  environment has precedence over rc file
#  load_neededvars subroutine loads directly into %ENV
#
my @need_oravars = qw( 
    ORACLE_HOME
    ORACLE_SID
    ORACLE_USER
    ORACLE_PASS
    TNS_ADMIN
);
&load_neededvars ( @need_oravars );

## minimum column width
#  needs to be ensmartened
#
my $min_col_width = 15;


## load optional settings from rc file
#
my @presets = &add_rc_settings(\%rc_vars);

my $oracle_home = $ENV{'ORACLE_HOME'};
my $oracle_sid  = $ENV{'ORACLE_SID' };
my $oracle_user = $ENV{'ORACLE_USER'};
my $oracle_pass = $ENV{'ORACLE_PASS'};
# my $tmp_dir     = $ENV{'TMP_DIR'};
my $sqlplus_full = "$oracle_home/bin/sqlplus";
my $sqlplus_args = '-L -S';
if ( ! -f $sqlplus_full ) { die "No sqlplus at $sqlplus_full\n"; }
if ( ! -x $sqlplus_full ) { die "Cannot execute $sqlplus_full\n"; }

## connect to database
#
my $dbh = DBI->connect( "dbi:Oracle:$oracle_sid" , "$oracle_user" , "$oracle_pass" ) || die( $DBI::errstr . "\n" );
$dbh->{AutoCommit}    = 0;
$dbh->{RaiseError}    = 1;
$dbh->{ora_check_sql} = 0;
$dbh->{RowCacheSize}  = 16;


## optionally load tables for tab-completion
#
my @user_tables;
if ( ( defined $rc_vars{'ENABLE_TABS'} ) and ( $rc_vars{'ENABLE_TABS'} =~ /on|yes|true/i ) ) {
    @user_tables = &load_usertables( $dbh );
}

## load tab-completion
#
my @nice_tabs = qw( 
    select
    desc
    tabs
    insert
    into
    create
    from
    where
    varchar2
    exists
    number
    timestamp
    dual
    between
    exists
);
push @nice_tabs , @user_tables;
my @tab_completes = &load_tabs(@nice_tabs);

## set up readline with tab completion
#
my $prompt = "OSQSH> ";
my $term = Term::ReadLine->new('OSqsh');
my $attribs = $term->Attribs;
$attribs->{completion_function} = sub { return @tab_completes; };


## now run the prompt
#
my @multiline_cmd;
my $sth;
while ( defined ( my $command = $term->readline($prompt)) ) {

    ## quit (^D also works)
    #
    if ( $command =~ /^quit\W*/i ) {
        exit 0;

    ## record settings
    #
    } elsif ( $command =~ /^set /i ) {
        push @presets , $command;

    ## add table column headers for tab completion
    #
    } elsif ( $command =~ /^tabs (\w+)/i ) {
        my $load_table = $1;
        my @column_headers = &get_col_headers( $dbh , $load_table );
        push @nice_tabs , @column_headers;
        my @tab_completes = &load_tabs(@nice_tabs);
        $attribs->{completion_function} = sub { return @tab_completes; };

    ## any line that contains a semicolon will be executed (anything after the semicolon is ignored)
    #
    } elsif ( $command =~ /;/ ) {

        $command =~ s/;.*$/;/;
        push @multiline_cmd , $command;
        my $multiline_cmd = join ' '  , @multiline_cmd;
        my $presets       = join "\n" , @presets;
        @multiline_cmd = ();

        # $term->addhistory($multiline_cmd) if ( $command =~ /\S/ );

        $multiline_cmd =~ s/;.*$//;

        # my $sql_display = &return_sql_command( $dbh , $multiline_cmd );
        # print "$sql_display";

        my ( $result_ref , $result_columninfo_ref ) = &run_sql_command( $dbh , $multiline_cmd );
        my @sql_result = @$result_ref;
        my @sql_result_columninfo = @$result_columninfo_ref;
        my $result_out = &format_result( \@sql_result , \@sql_result_columninfo );
        print "$result_out";

    ## anything else is considered a multiline command
    #
    } else {
        push @multiline_cmd , $command;
    }

    ## show the buffer if anythings in it
    #
    if ( @multiline_cmd > 0 ) {
        print "@multiline_cmd\n";
    }

}

print "\n";
END {
    $dbh->disconnect if defined($dbh);
}


##########################################################################
# Subroutines
##########################################################################
sub load_rcfile {

    my %local_rc_vars;
    my $setcount = 1;
    if ( defined $ENV{'HOME'} ) {
        my $rc_file = "$ENV{'HOME'}/.osqshrc";
    
        if ( -f $rc_file ) {
            open ( RCFILE , "$rc_file" ) || die "Unable to open $rc_file\n";
            while (<RCFILE>) {
                chomp;              # no newline
                s/#.*//;            # no comments
                s/^\s+//;           # no leading white
                s/\s+$//;           # no trailing white
                next unless length; # anything left?
                my ($var, $value);
                if ( m/^(set\s+.*)$/i ) {
                    # print "found setting $1\n";
                    $var   = "set" . $setcount;
                    $value = $1;
                    $setcount++;
                } else {
                    ( $var , $value ) = split( /\s*=\s*/ , $_ , 2 );
                }
                $local_rc_vars{$var} = $value;
            }
        }
    }

    return %local_rc_vars;

}

sub load_neededvars {
    my @load_these = @_;
    foreach my $this_oravar ( @load_these ) {
        if ( defined $ENV{"$this_oravar"} ) {
            # good
        } elsif ( defined $rc_vars{$this_oravar} ) {
            $ENV{"$this_oravar"} = $rc_vars{$this_oravar};
        } else {
            print "Enter $this_oravar: ";
            my $input_var = <STDIN>;
            chomp $input_var;
            $ENV{"$this_oravar"} = $input_var;
        }
    }
}

sub load_usertables {

    my $dbh_ref = shift;
    my $cmd = "select table_name from user_tables";
    my $usertables_ref = $dbh->selectall_arrayref( $cmd, { Slice => {} });
    my @load_tables = map { $_ = $_->{TABLE_NAME}; } @$usertables_ref;
    return @load_tables;

}

sub load_tabs {
    my @these_words = @_;
    my @add_tabs;
    foreach my $this_tab ( @these_words ) {
        next unless ( $this_tab =~ /\w/ );
        $this_tab =~ s/^\s//;
        $this_tab =~ s/\s$//;
        my $this_tab_uc = uc( $this_tab );
        my $this_tab_lc = lc( $this_tab );
        push @add_tabs , $this_tab_uc , $this_tab_lc;
    }
    return @add_tabs;
}

sub get_col_headers {

    my ( $dbh_ref , $read_table ) = @_;
    $read_table = uc($read_table);
    my $cmd = "select COLUMN_NAME from ALL_COL_COMMENTS where table_name = '$read_table'";
    my $columnnames_ref = $dbh->selectall_arrayref( $cmd, { Slice => {} });
    my @load_columns = map { $_ = $_->{COLUMN_NAME}; } @$columnnames_ref;
    return @load_columns;

}

sub add_rc_settings {
    my @custom_settings;
    my(%all_settings) = %{$_[0]};
    my @all_settings = keys( %all_settings );
    foreach my $this_setting ( @all_settings ) {
        if ( $this_setting =~ m/^set\d+/ ) {
            my $set_setting = $all_settings{$this_setting};
            push @custom_settings , $set_setting;
        }
    }
    return ( @custom_settings );
}

sub get_column_data {

    ## collect column data
    #  there MUST be a better way to do this
    #
    my ( $dbh_ref , $sth_ref ) = @_;
    my @type_names   = map { scalar $dbh_ref->type_info($_)->{TYPE_NAME} } @{ $sth_ref->{TYPE} };
    my @column_names = @{ $sth_ref->{NAME}      };
    my @precision    = @{ $sth_ref->{PRECISION} };
    my @scale        = @{ $sth_ref->{SCALE}     };
    my @column_stuff;
    my $count_columns = 0;
    foreach my $this_col_name ( @column_names ) {
        $column_stuff[$count_columns]{'col_name'}  = $this_col_name;
        $column_stuff[$count_columns]{'col_type'}  = $type_names[$count_columns];
        $column_stuff[$count_columns]{'precision'} = $precision[$count_columns];
        $column_stuff[$count_columns]{'scale'}     = $scale[$count_columns];
        $column_stuff[$count_columns]{'scale2'}    = $scale[$count_columns];
        $count_columns++;
    }

    return @column_stuff;

}

sub get_header {

    my @column_stuff = @_;
    my $header = '';
    my $count_columns = 0;
    my @separators;
    $header .= "\n";
    foreach my $this_column ( @column_stuff ) {

        my $width = ( $column_stuff[$count_columns]{'precision'} > $min_col_width )
            ? $column_stuff[$count_columns]{'precision'}
            : $min_col_width;

        for ( my $i = 1 ; $i <= $width ; $i++ ) { $separators[$count_columns] .= "-"; }

        $header .= sprintf( "%-"."$width"."s", ${$this_column}{'col_name'});
        $header .= ' ';
        $count_columns++;
    }
    $header .= "\n";

    foreach my $this_line ( @separators ) { $header .= "$this_line "; }
    $header .= "\n";

    return $header;
}

sub return_sql_command_OLD {

    my ( $dbh_ref , $sql_cmd ) = @_;
    my $sth_ref = $dbh_ref->prepare($sql_cmd);
    $sth_ref->execute();

    my $display_result = '';
    my @column_info = &get_column_data ( $dbh_ref , $sth_ref );
    my $header_string = &get_header( @column_info );
    $display_result .= "$header_string";

    my $rv;
    while ( my @row = $sth_ref->fetchrow_array() ) {
        my $count_columns = 0;
        foreach my $this_row (@row) {
    
            my $width = ( $column_info[$count_columns]{'precision'} > $min_col_width )
                ? $column_info[$count_columns]{'precision'}
                : $min_col_width;
    
            if ( defined $this_row ) {
                $display_result .= sprintf( "%-"."$width"."s", $this_row);
            } else {
                $display_result .= sprintf( "%-"."$width"."s", '' );
            }
            $display_result .=  " ";
            $count_columns++;
        }
        $rv = $sth_ref->rows;
        $display_result .= "\n";
    }
    $display_result .= "\n$rv rows selected.\n\n";

    return $display_result;
}

sub run_sql_command {

    my ( $dbh_ref , $sql_cmd ) = @_;

    my $sth_ref = $dbh_ref->prepare($sql_cmd);
    my $ary_ref = $dbh->selectall_arrayref($sql_cmd);
    my @ary_info = &get_column_data ( $dbh_ref , $sth_ref );
    my $ary_info_ref = \@ary_info;

    return ( $ary_ref , $ary_info_ref );

}

sub format_result {

    my ( $out_ref , $out_info_ref ) = @_;
    my $display_result = '';

    my @column_info = @$out_info_ref;

    my $header_string = &get_header( @column_info );
    $display_result .= "$header_string";


    my @row = ();
    my $rv = "a zillion";
    foreach my $this_thing ( @$out_ref ) {
        my $count_columns = 0;
        foreach my $this_row ( @$this_thing ) {
    
            my $width = ( $column_info[$count_columns]{'precision'} > $min_col_width )
                ? $column_info[$count_columns]{'precision'}
                : $min_col_width;
    
            if ( defined $this_row ) {
                $display_result .= sprintf( "%-"."$width"."s", $this_row);
            } else {
                $display_result .= sprintf( "%-"."$width"."s", '' );
            }
            $display_result .=  " ";
            $count_columns++;
        }
        $rv = "zillion";
        $display_result .= "\n";
    }
    $display_result .= "\n$rv rows selected.\n\n";

    return $display_result;
}
